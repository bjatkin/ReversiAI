package main

import (
	rb "Projects/School/ReversiBot/ReversiGo2/board"
	rc "Projects/School/ReversiBot/ReversiGo2/client"
	"Projects/School/ReversiBot/ReversiGo2/generate"
	"fmt"
	"os"
	"strconv"
	"time"
)

func main() {
	err := generate.RankPolicies("policy.log")
	if err != nil {
		fmt.Printf("Error: %s\n", err)
	}
	return
	// Policy1 := [160]float64{0.6046602879796196, 0.9405090880450124, 0.6645600532184904, 0.4377141871869802, 0.4246374970712657, 0.6868230728671094, 0.06563701921747622, 0.15651925473279124, 0.09696951891448456, 0.30091186058528707, 0.5152126285020654, 0.8136399609900968, 0.21426387258237492, 0.380657189299686, 0.31805817433032985, 0.4688898449024232, 0.28303415118044517, 0.29310185733681576, 0.6790846759202163, 0.21855305259276428, 0.20318687664732285, 0.360871416856906, 0.5706732760710226, 0.8624914374478864, 0.29311424455385804, 0.29708256355629153, 0.7525730355516119, 0.2065826619136986, 0.865335013001561, 0.6967191657466347, 0.5238203060500009, 0.028303083325889995, 0.15832827774512764, 0.6072534395455154, 0.9752416188605784, 0.07945362337387198, 0.5948085976830626, 0.05912065131387529, 0.692024587353112, 0.30152268100656, 0.17326623818270528, 0.5410998550087353, 0.544155573000885, 0.27850762181610883, 0.4231522015718281, 0.5305857153507052, 0.2535405005150605, 0.28208099496492467, 0.7886049150193449, 0.3618054804803169, 0.8805431227416171, 0.2971122606397708, 0.8943617293304537, 0.09745461839911657, 0.9769168685862624, 0.07429099894984302, 0.22228941700678773, 0.6810783123925709, 0.24151508854715265, 0.31152244431052484, 0.932846428518434, 0.741848959991823, 0.8010550426526613, 0.7302314772948083, 0.18292491645390843, 0.4283570818068078, 0.8969919575618727, 0.6826534880132438, 0.9789293555766876, 0.9222122589217269, 0.09083727535388708, 0.4931419977048804, 0.9269868035744142, 0.9549454404167818, 0.3479539636282229, 0.6908388315056789, 0.7109071952999951, 0.5637795958152644, 0.6494894605929404, 0.5517650490127749, 0.7558235074915978, 0.40380328579570035, 0.13065111702897217, 0.9859647293402467, 0.8963417453962161, 0.3220839705208817, 0.7211477651926741, 0.6445397825093294, 0.08552050754191123, 0.6695752976997745, 0.6227283173637045, 0.3696928436398219, 0.2368225468054852, 0.5352818906344061, 0.18724610140105305, 0.2388407028053186, 0.6280981712183633, 0.1267529293726013, 0.28133029380535923, 0.41032284435628247, 0.43491247389145765, 0.6250950283005304, 0.5501469205077233, 0.6236088264529301, 0.7291807267342981, 0.8305339189948062, 0.0005138155161213613, 0.7360686014954314, 0.39998376285699544, 0.497868113342702, 0.6039781022829275, 0.40961827788499267, 0.02967128127488647, 0.0019038945142366389, 0.0028430411748625642, 0.915821314612957, 0.5898341850049194, 0.559392449071014, 0.8154051709333606, 0.8780117586524, 0.4584424785756506, 0.6001655953233308, 0.02626515060968944, 0.8458327872480417, 0.24969320116349378, 0.641784290799583, 0.24746660783662855, 0.17365584472313275, 0.5926237532124455, 0.8143945509670211, 0.6938381365172095, 0.03032254783300687, 0.539210105890946, 0.9756748149873165, 0.7507630564795985, 0.2940063127950149, 0.7531612777367586, 0.150964044979607, 0.35576726540923664, 0.8319308529698163, 0.2318300419376769, 0.6278346050000227, 0.4983943012759756, 0.08983608926036683, 0.02519395979489504, 0.3922161831540248, 0.5893830864007992, 0.9296116354490302, 0.572086801443084, 0.5885763451434821, 0.4117626883450162, 0.5525803898142438, 0.49160739613162047, 0.9579539135375136, 0.7972085409108028, 0.10738111282075208, 0.7830349733960021, 0.3932509992288867, 0.1304138461737918, 0.19003276633920804}
	// Policy2 := [160]float64{-0.38405305193645667, 1.7296641804513229, 3.026492637231298, -2.172377262651657, -2.083440716506876, -0.9431242055914978, 1.2342150242827128, -0.5651480770115926, -2.0511005114101892, 4.225233314558626, 0.029125266066356792, -0.08563249466462508, 1.9008099938058043, 1.1027873283914467, -1.9384800338400154, -2.2365625028133715, -0.5555238790755682, 2.1811374281779616, -0.44960137737324485, -0.5282597200513914, -0.39351788204219745, -0.553453483902813, 0.49489513961417886, -1.1867568161840985, -0.8050646253694607, -1.0351016758268863, 1.9409960972587526, 2.9830417288703632, 1.2592485926226, -0.3431166397763385, -1.9081242776092187, 3.693353286326148, -0.9118179587165116, -1.2779445864534051, 0.12323563307471463, -1.126888490111885, -0.671969697097603, 4.374652546202185, -0.38769498597927554, -0.9318152211905716, 0.1322133354462114, 0.029634077576089712, 0.48300200039313923, 3.6403201298434498, -0.34465915237975286, -2.5415005595476594, -1.0728128461169297, -0.439754467636026, 0.008741740597243919, 3.9421259840203717, -2.0956888813955423, -1.6981526999392114, -3.739869082960583, -0.3671348707439295, 0.17027080542523182, -0.08620790698813174, -4.30962014511782, 3.505094920500452, -0.5954800267068903, 2.039813345438741, 0.15845342777211846, -1.934326749971441, -4.0004320364110795, 4.435959504538053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	Policy2 := [160]float64{0.14901882218782664, 10.804016035848536, 0.4903492050468729, -2.3468404661669124, 7.409942210637759, -4.264194853057597, 11.888323884462208, 3.0851649995942476, -0.20328176343368565, -8.58973607658957, -0.489794281274042, 7.633630318396154, 0.09270110040837143, -0.6892634865869742, -0.14569356121060228, -6.279490421093722, 2.482018554844577, -1.744368582383121, 0.6106786713965584, 2.69024654726897, -9.669432953316354, 0.05272953365067928, 7.532117937082905, -0.5953839840288241, -6.689138781485073, -1.4573715947418937, 3.2180091706497382, -4.855143904215769, 5.152830293932816, -5.200078851187374, 1.8217115535055148, 6.169098646614094, -4.031492475569111, -3.533247096229762, 5.926104090684438, 4.1591474483278725, -0.14157386887145645, -8.525471330673632, -2.8832020809872696, 5.233384425660065, 2.0270895349404485, -1.0594225432029738, 0.9901567662145118, -1.169787122694668, -2.8352300458315502, -9.596758040686156, 10.315640458871306, -5.441357520719493, 0.21057792758458282, -7.365296086899174, -6.409299954551328, 4.845041314461942, -0.11669095350590425, -3.2237466721464436, 1.41570632361768, -1.3969419992321828, 1.9278190238230621, -5.29516177669096, -3.3575968505298808, 2.3370784665942264, 2.056351754085227, 4.166397543566826, 0.4564498763799214, 0.8666283390718822, -5.699712747287882, -1.7494351922574416, 4.240973528416131, -1.9275762231394948, -4.903432769402654, -9.3176941449002, 1.8509663492201232, -1.939888213973731, 2.5866137016648976, -2.6461273450844263, 0.5164751332476831, 7.754259615201813, 5.614720805329221, -1.5314957140549095, -4.195900926940927, -3.0185260607365176, -2.2268099191093356, -1.3626999501539676, 8.417928644548065, 2.366315744041487, -1.761157328259424, -3.0396794188250853, 6.389993086750665, -4.783789804977809, -1.5994022777698127, -1.7621322504063746, 2.9664241602065884, 1.467348763915078, 1.6743194077354557, -0.880237397880887, 0.3425888737115028, 1.9932152669554482, -1.3044110816379875, -6.679313428913284, -7.049573815502616, 2.724045043148972, 1.6152691320572656, -0.4334161023563624, 2.4418875873707364, -6.925329282647308, -1.4200153611464228, 4.532457835653661, -0.7274952904107848, 1.9681358929330623, 1.1556409141763209, 4.7908580880735725, 2.2811366650347433, 0.040944947028259016, -3.4845307276944224, 0.35778449626640507, 1.0061859872946164, 8.090953297902958, -0.6172371224731907, -4.414677780339462, 3.008447720922167, 0.3788207216037377, -0.0010377096713002354, -1.3390067491699167, 2.5910570397199715, -1.8934231292380614, -1.9300872536397282, 6.016300666956028, 2.3519959582778958, 1.5382652848344467, 3.665292333106227, 3.8865509699265886, -2.4648277248793296, 4.941780479291485, 4.771528888571866, -3.0833273519136335, -7.3084884979656675, 9.971322410646223, 1.7692286031842066, -3.5631639418542074, -3.6927343554965417, -3.41311669703361, -3.7102988318441135, -4.800719381206794, 1.3724684878565752, -7.562513724439324, 9.605179172013406, 1.3602236060048967, 0.7347214953341813, 0.4137337155956898, 7.062572686234386, -0.13536081924959603, -1.9416935514162956, 3.36586275284222, -3.039688352284191, -11.408461738495964, 2.5961221667661807, 8.087888681206827, -0.22271977554246947, 0.23216113323605658, -4.907426563609609, 1.2185763838794665}

	// generate.EvolvePolicy(40, 1000)
	// return
	// err := generate.ParseGameFile("/Users/brandon/Desktop/GradSchool/Semester1/CS 474 DNN/HighQualityData/yahoo-japan.xml")

	// if err != nil {
	// 	fmt.Printf("err: %v", err.Error())
	// }
	// return

	// rb.LoadNetwork("newNetwork.txt")
	// a := rb.Board{
	// 	0 1 1 1 0 0 0 0
	// 	0 0 0 1 0 1 0 0
	// 	0 0 1 1 1 2 0 1
	// 	0 2 2 2 2 2 2 1
	// 	0 0 1 1 2 1 0 1
	// 	0 1 0 0 2 0 0 0
	// 	0 0 0 0 2 1 0 0
	// 	0 0 0 0 0 0 1 0
	// }
	// b := rb.Board{
	// 	0 1 1 1 0 0 0 0
	// 	0 2 0 1 0 1 0 0
	// 	0 0 2 1 1 2 0 1
	// 	0 2 2 2 2 2 2 1
	// 	0 0 1 1 2 1 0 1
	// 	0 1 0 0 2 0 0 0
	// 	0 0 0 0 2 1 0 0
	// 	0 0 0 0 0 0 1 0
	// }
	// c := rb.Board{
	// 	2, 0, 0, 0, 0, 0, 0, 2,
	// 	0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 2, 2, 2, 2, 1, 0,
	// 	0, 0, 0, 2, 2, 2, 1, 0,
	// 	0, 0, 2, 1, 1, 1, 1, 0,
	// 	1, 2, 1, 1, 1, 1, 1, 0,
	// 	2, 0, 1, 1, 0, 0, 0, 2,
	// }
	// fmt.Printf("p1: %d, p2: %d\n", a.Value(1), a.Value(2))
	// fmt.Printf("p1: %d, p2: %d\n", b.Value(1), b.Value(2))
	// fmt.Printf("p1: %d, p2: %d\n", c.Value(1), c.Value(2))
	// return

	// acc, err := benchmark.TestAccuracy()
	// if err != nil {
	// 	fmt.Printf("err: %s\n", err.Error())
	// }
	// fmt.Printf("acc: %f\n", acc)
	// return

	// rb.LoadNetwork("Flat2Layer.txt")
	// generate.SaveScoredPositions2("./data/highQualityData.csv", "./data/gen2/gen2Games.txt", 50, 0, true, "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 2 2 0 0 0 2 1 2 2 0 0 0 0 0 2 2 1 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0]", 500)
	// return
	// err := generate.AgumentData("./data/gen2/gen2Games.txt", "./data/gen2/gen2GamesAug.txt")
	// if err != nil {
	// 	fmt.Printf("Error Generating Augmented data: %s", err.Error())
	// }
	// return

	if len(os.Args) < 3 {
		fmt.Printf("Please specify both the address of the server and the player number\n")
		return
	}

	fmt.Printf("connecting to the Reversi server @ %s...\n", os.Args[1])
	player, err := strconv.Atoi(os.Args[2])
	if err != nil || player < 0 || player > 2 {
		fmt.Printf("Player number must be 1 or 2: %s", err.Error())
		return
	}

	messages := make(chan rc.Message)
	client := rc.GetConnection(os.Args[1], player)
	go client.Receive(messages)

	// if player == 1 {
	// rb.LoadNetwork("gen2Net.txt")
	// rb.Policy = Policy1
	// }
	// if player == 2 {
	// rb.LoadNetwork("Flat2Layer.txt")
	rb.Policy = Policy2
	// }
	for {
		select {
		case message := <-messages:
			//We got a message from the server
			if message.GameOver {
				fmt.Println("Game Over!")
				return
			}
			if message.Turn == player {
				//Get all the valid moves in the current board state
				board := rb.Board(message.Board)
				move, pass := findMove(&board, player, 500*time.Millisecond)
				if pass {
					break //We have no valid moves
				}

				client.SendMove(move.XY())
			}
		}
	}
}

func findMove(b *rb.Board, player int, searchTime time.Duration) (rb.Move, bool) {
	moves := b.ValidMoves(player)
	if len(moves) == 0 {
		//No legal moves so we pass
		return rb.Move{}, true
	}
	if len(moves) == 1 {
		//No need to search this move, just play it
		return moves[0], false
	}

	// move := rb.StocasticBestMove(b, player, moves)

	/* Alpha Beta Pruning Depth */

	// value := rb.MinScore - 1
	// values := []int{}
	// move := moves[0]
	// total := 0
	// for _, m := range moves {
	// 	nb := b.Move(m)
	// 	score := rb.ValueBoardDepth(&nb, player, 0, 1, rb.MaxScore+1)
	// 	if score > value {
	// 		value = score
	// 		move = m
	// 	}
	// 	total += score
	// 	values = append(values, score)
	// }

	// sel := rand.Intn(total)
	// if float32(sel) > 0.99*float32(total) {
	// 	run := 0
	// 	for i, m := range moves {
	// 		run += values[i]
	// 		if sel <= run {
	// 			move = m
	// 			break
	// 		}
	// 	}
	// }

	/* Alpha Beta Pruning */

	stops := []chan bool{}
	scores := []chan float64{}
	for i, m := range moves {
		stops = append(stops, make(chan bool, 1))
		scores = append(scores, make(chan float64, 1))
		nb := b.Move(m)
		go rb.ValueBoard(&nb, player, 0, rb.MaxScore+1, stops[i], scores[i])
	}

	time.Sleep(searchTime)

	//Stop all the go routines and have them head back up
	for i := 0; i < len(moves); i++ {
		close(stops[i])
	}

	//Find the best scoring move
	// values := []float64{}
	// total := 0.0
	max := float64(rb.MinScore - 1)
	move := moves[0]
	for i, m := range moves {
		score := <-scores[i]
		if score > max {
			max = score
			move = m
		}
		// total += score
		// values = append(values, score)
		close(scores[i])
	}

	/*
		sel := rand.Intn(total)
		if float32(sel) > 0.9*float32(total) {
			run := 0
			for i, m := range moves {
				run += values[i]
				if sel <= run {
					move = m
					break
				}
			}
		}
	*/

	/* Simple Max Move
	max := rb.MinScore - 1
	move := moves[0]
	for _, m := range moves {
		score := b.Move(m).Value(player)
		if score > max {
			max = score
			move = m
		}
	}
	*/

	return move, false
}
